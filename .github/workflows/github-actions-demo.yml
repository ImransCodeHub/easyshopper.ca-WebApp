
# specify the name of your project, Deploy to Beanstalk
name: Deploy to Beanstalk

# Configure what events and branches you want to trigger your pipeline on, in this case I want it to be triggered when I push the code in main branch
on:
  push:
    branches:
      - master
    
# Create jobs to create your image which you can deploy on AWS, I am running my Node20 application on ubuntu OS. 
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

# use npm to install the front end, the build the compiled react front end and copy to the backend 
    - name: install frontend
      env:
        CI: ""
      run: |
        cd frontend
        npm install
        npm run build
        cp -r build ../backend
# use npm to install the back end
    - name: install backend
      run: |
       cd backend
       npm install
# Create the deployment package by zipping the contents of the backend folder and naming it deploy.zip.  I am also copying this deploy.zip to the root directory  
    - name: Generate deployment package
      run: |
        cd backend
        zip -r deploy.zip *
        cp deploy.zip ../
# Getting the current timestamp to use to name the deployment version
    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time
# replace any ':' and '.' characters with a '-' so the deployment will have a valid name
    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

# Deploy the deployment package to AWS Serverless

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to S3
        run: aws s3 sync . s3://easyshopper.ca --delete
        
      - name: Deploy Lambda function
        run: aws lambda update-function-code --function-name GetProductsInfo --zip-file fileb://lambda.zip

    - name: Deployed!
      run: echo App deployed!
      # - name: Deploy Lambda functions
      #   un: |
      #   for function in lambda1 lambda2 lambda3; do
      #     aws lambda update-function-code --function-name $function --zip-file fileb://lambda.zip
      #   done
